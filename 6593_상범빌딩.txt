#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <functional>
#include <algorithm>
#include <vector>
#include <cstdio>
#include <cassert>
#include <string>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <stack>
#include <queue>
#include <ctime>
#include <deque>
#include <set>
#include <list>
#include <map>
#include <tuple>
#include <sstream>
#include <iomanip> // 출력포매팅 라이브러리


using namespace std;


int type[6][3] = 
{
	{1, 0, 0},
	{-1, 0, 0},
	{0, 1, 0},
	{0, -1, 0},
	{0, 0, 1},
	{0,0,-1}
};

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);


	while (1)
	{
		int l, r, c;
		cin >> l >> r >> c;
		if (l == 0 && r == 0 && c == 0)
			break;

		char board[31][31][31];
		int dist[31][31][31];
		bool isEscape = false;
		queue<tuple<int, int, int>> q;

		for (int i = 0; i < l; i++)
			for (int j = 0; j < r; j++)
				fill(dist[i][j], dist[i][j] + c, 0);

		for (int i = 0; i < l; i++)
		{
			for (int j = 0; j < r; j++)
			{
				string s;
				cin >> s;
				for (int k = 0; k < c; k++)
				{
					board[i][j][k] = s[k];
					if (board[i][j][k] == 'S')
					{
						q.push({ i,j,k });
						dist[i][j][k] = 0;
					}

					else if (board[i][j][k] == '.')
						dist[i][j][k] = -1;
				}
			}
		}

		while (!q.empty())
		{
			if (isEscape)
				break;

			int h = get<0>(q.front());
			int x = get<1>(q.front());
			int y = get<2>(q.front());
			q.pop();

			for (int i = 0; i < 6; i++)
			{
				int nh = h + type[i][0];
				int nx = x + type[i][1];
				int ny = y + type[i][2];

				if (nx < 0 || nx >= r || ny < 0 || ny >= c || nh < 0 || nh >= l)
					continue;

				
				if (board[nh][nx][ny] == '#' || dist[nh][nx][ny] > 0)
					continue;

			
				dist[nh][nx][ny] = dist[h][x][y] + 1;

				if (board[nh][nx][ny] == 'E')
				{
					cout << "Escaped in " << dist[nh][nx][ny] << " minute(s).\n";
					isEscape = true;
					break;
				}
				q.push({ nh,nx,ny });
			}
		}

		while (!q.empty())
			q.pop();

		if (!isEscape)
			cout << "Trapped!\n";

	}
	
	return 0;
}

