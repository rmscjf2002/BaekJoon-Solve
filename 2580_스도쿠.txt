#define _CRT_SECURE_NO_WARNINGS



#include <iostream>
#include <functional>
#include <algorithm>
#include <vector>
#include <cstdio>
#include <cassert>
#include <string>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <stack>
#include <queue>
#include <numeric>
#include <ctime>
#include <deque>
#include <set>
#include <list>
#include <map>
#include <tuple>
#include <sstream>
#include <iomanip> // 출력포매팅 라이브러리


using namespace std;



int board[10][10];
int len;
bool finish;
vector<pair<int, int>> v;

bool check(int r, int c)
{
	for (int i = 0; i < 9; i++)
	{
		if (board[i][c] == board[r][c] && i != r)
			return false;
		if (board[r][i] == board[r][c] && i != c)
			return false;
	}

	int tmpr = (r / 3) * 3;
	int tmpc = (c / 3) * 3;

	for (int i = tmpr; i < tmpr + 3; i++)
	{
		for (int j = tmpc; j < tmpc + 3; j++)
		{
			if (i == r && j == c)
				continue;

			if (board[i][j] == board[r][c])
				return false;
		}
	}

	return true;
}

void DFS(int cnt)
{
	if (cnt == len)
	{
		finish = true;
		return;
	}

	int r, c;
	for (int i = 1; i <= 9; i++)
	{
		tie(r, c) = v[cnt];
		board[r][c] = i;
		if (check(r, c))
			DFS(cnt + 1);
		if (finish)
			return;
		board[r][c] = 0;
	}

}

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);

	for (int i = 0; i < 9; i++)
	{
		for (int j = 0; j < 9; j++)
		{
			cin >> board[i][j];
			if (board[i][j] == 0)
				v.push_back({ i,j });
		}
	}

	len = v.size();

	DFS(0);

	for (int i = 0; i < 9; i++)
	{
		for (int j = 0; j < 9; j++)
			cout << board[i][j] << ' ';
		cout << '\n';
	}
	return 0;
}
