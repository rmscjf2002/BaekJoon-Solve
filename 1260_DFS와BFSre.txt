#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <functional>
#include <algorithm>
#include <vector>
#include <cstdio>
#include <cassert>
#include <string>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <stack>
#include <queue>
#include <ctime>
#include <deque>
#include <set>
#include <list>
#include <map>
#include <tuple>
#include <sstream>
#include <iomanip> // 출력포매팅 라이브러리


using namespace std;


int n, m, v;
vector<vector<int>> graph;
bool visited[1001] = { false };

void DFS(int _v)
{
	visited[_v] = true;
	cout << _v << ' ';

	for (int i = 0; i < graph[_v].size(); i++)
	{
		if (!visited[graph[_v][i]])
		{
			visited[graph[_v][i]] = true;
			DFS(graph[_v][i]);
		}
	}
}

void BFS(int _v)
{
	queue<int> q;
	q.push(_v);
	visited[_v] = true;

	while (!q.empty())
	{
		int cur = q.front();
		cout << cur << ' ';
		q.pop();

		for (int i = 0; i < graph[cur].size(); i++)
		{
			if (!visited[graph[cur][i]])
			{
				visited[graph[cur][i]] = true;
				q.push(graph[cur][i]);
			}
		}
	}
}

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);

	
	cin >> n >> m >> v;
	
	graph.resize(n+1);

	for (int i = 0; i < m; i++)
	{
		int a, b;
		cin >> a >> b;
		graph[a].push_back(b);
		graph[b].push_back(a);
	}

	for (int i = 1; i <= n; i++)
		sort(graph[i].begin(), graph[i].end());

	memset(visited, false, sizeof(visited));
	DFS(v);
	cout << '\n';
	memset(visited, false, sizeof(visited));
	BFS(v);
	cout << '\n';


	return 0;
}
	