#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <functional>
#include <algorithm>
#include <vector>
#include <cstdio>
#include <cassert>
#include <string>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <stack>
#include <queue>
#include <ctime>
#include <deque>
#include <set>
#include <list>
#include <map>
#include <tuple>
#include <sstream>
#include <iomanip> // 출력포매팅 라이브러리


using namespace std;


int m, n; // m -> 행 , n -> 열
int cnt = 0;
int ans = 0;
int board[501][501];
bool visited[501][501];
int type[4][2] = 
{
	{0,1},
	{1,0},
	{0,-1},
	{-1,0}
};

void BFS(int x, int y)
{
	queue<pair<int, int>> q;
	q.push({ x,y });
	visited[x][y] = true;

	int pic = 1;

	while (!q.empty())
	{
		x = q.front().first;
		y = q.front().second;
		q.pop();

		for (int i = 0; i < 4; i++)
		{
			int nx = x + type[i][0];
			int ny = y + type[i][1];

			if (nx < 0 || nx >= m || ny < 0 || ny >= n)
				continue;

			if (board[nx][ny] != 1 || visited[nx][ny])
				continue;

			q.push({ nx,ny });
			visited[nx][ny] = true;
			pic++;

		}
	}

	ans = max(ans, pic);
}

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);

	cin >> m >> n;


	for (int i = 0; i < m; i++)
	{
		for (int j = 0; j < n; j++)
			cin >> board[i][j];
	}

	for (int i = 0; i < m; i++)
	{
		for (int j = 0; j < n; j++)
		{
			if (board[i][j] == 1 && !visited[i][j])
			{
				BFS(i, j);
				cnt++;
			}
		}
	}

	cout << cnt << '\n';
	cout << ans << '\n';

	return 0;
}

