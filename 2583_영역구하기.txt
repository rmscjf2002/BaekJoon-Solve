#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <functional>
#include <algorithm>
#include <vector>
#include <cstdio>
#include <cassert>
#include <string>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <stack>
#include <queue>
#include <ctime>
#include <deque>
#include <set>
#include <list>
#include <map>
#include <tuple>
#include <sstream>
#include <iomanip> // 출력포매팅 라이브러리


using namespace std;

int m, n, k;
int board[101][101];
bool visited[101][101];

vector<int> answer;

int type[4][2] = 
{
	{0,1},
	{0,-1},
	{1,0},
	{-1,0}
};

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);

	cin >> m >> n >> k;

	for (int i = 0; i < k; i++)
	{
		int x1, x2, y1, y2;
		cin >> x1 >> y1 >> x2 >> y2;

		for (int j = y1; j < y2; j++)
		{
			for (int k = x1; k < x2; k++)
			{
				board[j][k] = 1;
			}
		}
	}
	
	int total = 0;

	for (int i = 0; i < m; i++)
	{
		for (int j = 0; j < n; j++)
		{
			if (board[i][j] == 1 || visited[i][j])
				continue;

			queue<pair<int, int>> q;
			q.push({ i,j });
			visited[i][j] = true;

			int ans = 1;
			total++;

			while (!q.empty())
			{
				int x = q.front().first;
				int y = q.front().second;
				q.pop();

				for (int i = 0; i < 4; i++)
				{
					int nx = x + type[i][0];
					int ny = y + type[i][1];

					if (nx < 0 || nx >= m || ny < 0 || ny >= n)
						continue;

					if (board[nx][ny] == 1 || visited[nx][ny])
						continue;

					q.push({ nx,ny });
					visited[nx][ny] = true;
					ans++;
				}
			}

			answer.push_back(ans);
		}
	}

	sort(answer.begin(), answer.end());

	cout << total << '\n';
	
	for (auto i : answer)
		cout << i << ' ';
	cout << '\n';

	return 0;
}

