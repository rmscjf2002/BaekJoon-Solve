#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <functional>
#include <algorithm>
#include <vector>
#include <cstdio>
#include <cassert>
#include <string>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <stack>
#include <queue>
#include <ctime>
#include <deque>
#include <list>
#include <map>
#include <tuple>

using namespace std;

int type[6][3] = 
{
	{-1,0,0},
	{1,0,0},
	{0,-1,0},
	{0,1,0},
	{0,0,-1},
	{0,0,1}
};

int tomato[101][101][101];
int visit[101][101][101];

queue<tuple<int, int, int>> q;

int _x, _y, _z;
int BFS(int z, int x, int y)
{
	int _max = 0;
	while (!q.empty())
	{
		tie(z, x, y) = q.front();
		q.pop();
		
		for (int i = 0; i < 6; i++)
		{
			int nz = z + type[i][0];
			int nx = x + type[i][1];
			int ny = y + type[i][2];

			if (nz >= 0 && nz < _z && nx >= 0 && nx < _x && ny >= 0 && ny < _y && visit[nz][nx][ny] == 0 && tomato[nz][nx][ny] == 0)
			{
				visit[nz][nx][ny] = visit[z][x][y] + 1;
				_max = max(_max, visit[nz][nx][ny]);
				q.push({ nz,nx,ny });
			}
		}
	}
	return _max;
}



int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);


	int ans = 0;

	cin >> _y >> _x >> _z;

	for (int i = 0; i < _z; i++)
	{
		for (int j = 0; j < _x; j++)
		{
			for (int k = 0; k < _y; k++)
			{
				cin >> tomato[i][j][k];

				if (tomato[i][j][k] == -1)
					visit[i][j][k] = -1;

				if (tomato[i][j][k] == 1)
				{
					visit[i][j][k] = 1;
					q.push({ i,j,k });
				}
			}
		}
	}

	
	for (int i = 0; i < _z; i++)
	{
		for (int j = 0; j < _x; j++)
		{
			for (int k = 0; k < _y; k++)
			{
				if (tomato[i][j][k] == 1)
				{
					ans += BFS(i, j, k);
				}
			}
		}
	}
	
	bool check = false;
	
	for (int i = 0; i < _z; i++)
	{
		for (int j = 0; j < _x; j++)
		{
			for (int k = 0; k < _y; k++)
			{
				if (visit[i][j][k] == 0)
				{
					check = true;
					break;
				}
			}
			if (check)
				break;
		}
		if (check)
			break;
	}

	if (check)
		cout << -1 << '\n';
	else
	{
		if (ans == 0)
			cout << 0 << '\n';
		else
			cout << ans - 1 << '\n';
	}

	
	return 0;
}
		