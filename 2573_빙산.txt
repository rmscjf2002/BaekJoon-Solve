#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <functional>
#include <algorithm>
#include <vector>
#include <cstdio>
#include <cassert>
#include <string>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <stack>
#include <queue>
#include <ctime>
#include <deque>
#include <set>
#include <list>
#include <map>
#include <tuple>
#include <sstream>
#include <iomanip> // 출력포매팅 라이브러리


using namespace std;

int row, col;
int board[301][301] = { 0 };
int tmp[301][301] = { 0 };
bool visited[301][301] = { false };
int answer = 0;
int ans = 0;
int type[4][2] = 
{
	{0,1},
	{0,-1},
	{1,0},
	{-1,0}
};

void BFS(int x, int y)
{
	queue<pair<int, int>> q;
	q.push({ x,y });
	visited[x][y] = true;

	while (!q.empty())
	{
		x = q.front().first;
		y = q.front().second;
		q.pop();

		for (int i = 0; i < 4; i++)
		{
			int nx = x + type[i][0];
			int ny = y + type[i][1];

			if (nx >= 0 && nx < row && ny >= 0 && ny < col && !visited[nx][ny] && board[nx][ny] != 0)
			{
				q.push({ nx,ny });
				visited[nx][ny] = true;
			}
		}
	}
}

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	
	cin >> row >> col;

	for (int i = 0; i < row; i++)
	{
		for (int j = 0; j < col; j++)
		{
			cin >> board[i][j];
			tmp[i][j] = board[i][j];
		}
	}

	
	while (1)
	{
		answer++;
		ans = 0;
		memset(visited, false, sizeof(visited));
		for (int i = 0; i < row; i++)
		{
			for (int j = 0; j < col; j++)
			{
				if (board[i][j] != 0)
				{
					int x = i;
					int y = j;
					for (int i = 0; i < 4; i++)
					{
						int nx = x + type[i][0];
						int ny = y + type[i][1];

						if (nx >= 0 && nx < row && ny >= 0 && ny < col && board[nx][ny] == 0)
						{
							if (tmp[x][y] > 0)
								tmp[x][y]--;
						}
					}
				}
			}
		}

		for (int i = 0; i < row; i++)
		{
			for (int j = 0; j < col; j++)
				board[i][j] = tmp[i][j];
		}

		int cnt = 0;

		for (int i = 0; i < row; i++)
		{
			for (int j = 0; j < col; j++)
			{
				if (board[i][j] == 0)
					cnt++;
			}
		}

		if (cnt == row*col)
		{
			cout << 0 << '\n';
			break;
		}

		for (int i = 0; i < row; i++)
		{
			for (int j = 0; j < col; j++)
			{
				if (!visited[i][j] && board[i][j] != 0)
				{
					ans++;
					BFS(i, j);
				}
			}
		}

		if (ans >= 2)
		{
			cout << answer << '\n';
			break;
		}

	}


	return 0;
}

