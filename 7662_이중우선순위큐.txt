#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <functional>
#include <algorithm>
#include <vector>
#include <cstdio>
#include <cassert>
#include <string>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <stack>
#include <queue>
#include <ctime>
#include <deque>
#include <set>
#include <list>
#include <map>
#include <tuple>
#include <sstream>
#include <iomanip> // 출력포매팅 라이브러리


using namespace std;


int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	
	/*int t;
	cin >> t;
	while (t--)
	{
		queue<int> q;
		priority_queue<int, vector<int>, greater<>> minpq;
		priority_queue<int> maxpq;

		
		int n;
		cin >> n;

		for (int i = 0; i < n; i++)
		{
			char c;
			cin >> c;

			if (c == 'I')
			{
				int a;
				cin >> a;
				q.push(a);
				maxpq.push(a);
				minpq.push(a);
			}

			else if (c == 'D')
			{
				

				int a;
				cin >> a;

				if (q.empty())
					continue;

				if (a == 1)
				{
					while (!minpq.empty())
					{
						minpq.pop();
					}

					while (!q.empty() && q.front() != maxpq.top())
					{
						q.push(q.front());
						minpq.push(q.front());
						q.pop();
					}
					
					
					if (!q.empty() && !maxpq.empty() && maxpq.top() == q.front())
					{
						q.pop();
						maxpq.pop();
					}
				}

				else if (a == -1)
				{
					while (!maxpq.empty())
					{
						maxpq.pop();
					}

					while (!q.empty() && q.front() != minpq.top())
					{
						q.push(q.front());
						maxpq.push(q.front());
						q.pop();
					}
					

					if (!q.empty() && !minpq.empty() && minpq.top() == q.front())
					{
						q.pop();
						minpq.pop();
					}
				}
			}
		}

		if (q.empty())
			cout << "EMPTY\n";
		else
			cout << maxpq.top() << ' ' << minpq.top() << '\n';
	}
	*/ // 메모리 초과 

	// multiset 사용!
	// key의 중복이 가능한 set구현가능
	// key가 오름차순으로 저장된다.

	int t;
	cin >> t;

	while (t--)
	{
		int n;
		cin >> n;

		multiset<int> ms;

		for (int i = 0; i < n; i++)
		{
			char c;
			cin >> c;

			

			if (c == 'I')
			{
				int a;
				cin >> a;
				ms.insert(a);
			}

			else if (c == 'D')
			{
				int a;
				cin >> a;
				if (a == 1)
				{
					if (!ms.empty())
					{
						auto iter = ms.end();
						iter--;
						ms.erase(iter);
					}
				}

				else if (a == -1)
				{
					if (!ms.empty())
						ms.erase(ms.begin());
				}
			}
		}

		if (ms.empty())
			cout << "EMPTY\n";

		else
		{
			auto iter = ms.end();
			iter--;
			cout << *iter << ' ' << *ms.begin() << '\n';
		}
	}


	
	return 0;
}
	