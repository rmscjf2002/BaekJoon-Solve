#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <functional>
#include <algorithm>
#include <vector>
#include <cstdio>
#include <cassert>
#include <string>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <stack>
#include <queue>
#include <ctime>
#include <deque>
#include <list>
#include <map>
#include <tuple>

using namespace std;

int type[4][2] = 
{
	{-1,0},
	{1,0},
	{0,-1},
	{0,1}
};

int Map[51][51];
bool visit[51][51];

int BFS(int x, int y)
{
	queue<pair<int, int>> q;
	visit[x][y] = true;
	q.push({ x,y });

	while (!q.empty())
	{
		x = q.front().first;
		y = q.front().second;
		q.pop();

		for (int i = 0; i < 4; i++)
		{
			int nx = x + type[i][0];
			int ny = y + type[i][1];

			if (nx >= 0 && nx < 51 && ny >= 0 && ny < 51 && !visit[nx][ny] && Map[nx][ny] == 1)
			{
				visit[nx][ny] = true;
				q.push({ nx,ny });

			}
		}
	}
	return 1;
}

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);

	int test;
	cin >> test;
	while (test--)
	{
		int ans = 0;
		memset(Map, 0, sizeof(Map));
		memset(visit, 0, sizeof(visit));
		int m, n; // m 가로 (열) , n 세로 (행)
		int k; // 배추 갯수
		cin >> n >> m >> k;
		for (int i = 0; i < k; i++)
		{
			int x, y;
			cin >> x >> y; // 배추가 심어져있는 좌표 x(행),y(열)
			Map[x][y] = 1;
		}
	
		

		for (int i = 0; i < n; i++)
		{
			for (int j = 0; j < m; j++)
			{
				if (Map[i][j] == 1 && !visit[i][j])
					ans += BFS(i, j);
			}
		}
		cout << ans << '\n';
	}
	

	return 0;
}