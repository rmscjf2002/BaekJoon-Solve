#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <functional>
#include <algorithm>
#include <vector>
#include <cstdio>
#include <cassert>
#include <string>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <stack>
#include <queue>
#include <ctime>
#include <deque>
#include <set>
#include <list>
#include <map>
#include <tuple>
#include <sstream>
#include <iomanip> // 출력포매팅 라이브러리


using namespace std;

int l, c;
vector<char> alphabet;

void DFS(int start, int jaum, int moum, string _s) // 최소 자음 2개 최소 모음 1개때문에 jaum, moum를 매개변수에 넣음
{
	if (_s.size() == l) // 문자열의 길이가 암호의 길이와 같으면
	{
		if (jaum >= 2 && moum >= 1) // 자음이랑 모음개수를 확인하고 맞다면 출력
			cout << _s << '\n';
		return;
	}

	for (int i = start; i < c; i++)
	{
		if (alphabet[i] == 'a' || alphabet[i] == 'e' || alphabet[i] == 'i' || alphabet[i] == 'o' || alphabet[i] == 'u')
			DFS(i + 1, jaum, moum + 1, _s + alphabet[i]);
		else
			DFS(i + 1, jaum + 1, moum, _s + alphabet[i]);
	}
}
int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);

	cin >> l >> c;

	for (int i = 0; i < c; i++)
	{
		char tmp;
		cin >> tmp;
		alphabet.push_back(tmp);
	}

	sort(alphabet.begin(), alphabet.end());
	
	string s = "";
	DFS(0, 0, 0, s);
	
	return 0;
}
	