#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <functional>
#include <algorithm>
#include <vector>
#include <cstdio>
#include <cassert>
#include <string>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <stack>
#include <queue>
#include <ctime>
#include <deque>
#include <set>
#include <list>
#include <map>
#include <tuple>
#include <sstream>
#include <iomanip> // 출력포매팅 라이브러리


using namespace std;



int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	
	// 플로이드 와샬 알고리즘

	// 모든 정점에서 모든 정점으로의 최단 경로를 한번에 구한다.

	int INF = 100000000;

	int n, m;

	int graph[101][101] = { 0 };
	cin >> n >> m;

	
	for (int i = 0; i < m; i++)
	{
		int a, b;
		cin >> a >> b;
		graph[a][b]++;
		graph[b][a]++;
	}

	for (int i = 1; i <= n; i++)
	{
		for (int j = 1; j <= n; j++)
		{
			if (i != j && graph[i][j] == 0)
				graph[i][j] = INF;
		}
	}

	for (int k = 1; k <= n; k++)
	{
		for (int i = 1; i <= n; i++)
		{
			for (int j = 1; j <= n; j++)
			{
				graph[i][j] = min(graph[i][j], graph[i][k] + graph[k][j]);
			}
		}
	}

	int ans = 10000000;
	int ansidx = 0;

	for (int i = 1; i <= n; i++)
	{
		int answer = 0;

		for (int j = 1; j <= n; j++)
		{
			if (i == j)
				continue;
			answer += graph[i][j];
		}

		if (ans > answer)
		{
			ans = answer;
			ansidx = i;
		}
	}

	cout << ansidx << '\n';

	return 0;
}