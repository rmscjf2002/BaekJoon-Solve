#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <functional>
#include <algorithm>
#include <vector>
#include <cstdio>
#include <cassert>
#include <string>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <stack>
#include <queue>
#include <ctime>
#include <deque>
#include <set>
#include <list>
#include <map>
#include <tuple>
#include <sstream>
#include <iomanip> // 출력포매팅 라이브러리


using namespace std;
 
int n;
int k;
bool visited[100001] = { false };
int parent[100001] = { 0 };
vector<int> ans;

void BFS(int cur)
{
	queue<tuple<int,int>> q;
	q.push({ cur,0 });  // 현재 위치 , 시간
	

	while (!q.empty())
	{
		cur = get<0>(q.front());
		int cnt = get<1>(q.front());
		q.pop();
		visited[cur] = true;
	

		if (cur == k)
		{
			cout << cnt << '\n';
			int idx = cur;
			while (idx != n)
			{
				ans.push_back(idx);
				idx = parent[idx];
			}
			cout << n << ' ';
			for (int i = ans.size() - 1; i >= 0; i--)
				cout << ans[i] << ' ';
			cout << '\n';

			return;
		}

		if (cur * 2 >= 0 && cur * 2 <= 100000 && !visited[cur * 2])
		{
			visited[cur * 2] = true;
			parent[cur * 2] = cur;
			q.push({ cur * 2,cnt + 1});
		}

		if (cur - 1 >= 0 && cur - 1 <= 100000 && !visited[cur - 1])
		{
			visited[cur - 1] = true;
			parent[cur - 1] = cur;
			q.push({ cur - 1,cnt + 1 });
		}

		if (cur + 1 >= 0 && cur + 1 <= 100000 && !visited[cur + 1])
		{
			visited[cur + 1] = true;
			parent[cur + 1] = cur;
			q.push({cur + 1, cnt + 1});
		}
	}


}

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);

	cin >> n >> k;
	BFS(n);

	return 0;
}
	
