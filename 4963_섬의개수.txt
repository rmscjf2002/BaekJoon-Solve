#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <functional>
#include <algorithm>
#include <vector>
#include <cstdio>
#include <cassert>
#include <string>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <stack>
#include <queue>
#include <ctime>
#include <deque>
#include <set>
#include <list>
#include <map>
#include <tuple>
#include <sstream>
#include <iomanip> // 출력포매팅 라이브러리


using namespace std;


int type[8][2]
=
{
	{-1,0},
	{1,0},
	{0,1},
	{0,-1},
	{1,1},
	{1,-1},
	{-1,1},
	{-1,-1}
};

int w, h;
int board[51][51];
bool visited[51][51];

void BFS(int x, int y)
{
	queue<pair<int, int>> q;
	q.push({ x,y });

	while (!q.empty())
	{
		int _x = q.front().first;
		int _y = q.front().second;
		q.pop();

		for (int i = 0; i < 8; i++)
		{
			int nx = _x + type[i][0];
			int ny = _y + type[i][1];

			if (nx >= 0 && nx < h && ny >= 0 && ny < w && !visited[nx][ny] && board[nx][ny] == 1)
			{
				visited[nx][ny] = true;
				q.push({ nx,ny });
			}
		}
	}
}

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);

	
	while (1)
	{
		memset(board, 0, sizeof(board));
		memset(visited, false, sizeof(visited));
		cin >> w >> h;
		int ans = 0;
		if (w == 0 && h == 0)
			break;


		for (int i = 0; i < h; i++)
		{
			for (int j = 0; j < w; j++)
			{
				int n;
				cin >> n;
				board[i][j] = n;
			}
		}

		for (int i = 0; i < h; i++)
		{
			for (int j = 0; j < w; j++)
			{
				if (!visited[i][j] && board[i][j] == 1)
				{
					visited[i][j] = true;
					BFS(i, j);
					ans++;
				}
			}
		}

		cout << ans << '\n';


	}


	return 0;
}
	

