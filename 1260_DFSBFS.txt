#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <functional>
#include <algorithm>
#include <vector>
#include <cstdio>
#include <cassert>
#include <string>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <stack>
#include <queue>
#include <ctime>
#include <deque>
#include <list>
#include <map>
#include <tuple>
using namespace std;

int n, m, v;
vector<int> graph[1001];
bool visit[1001] = { 0 };

void DFS(int V)
{
	visit[V] = true;
	cout << V << ' ';
	for (unsigned int i = 0; i < graph[V].size(); i++)
	{
		if (!visit[graph[V][i]])
		{
			DFS(graph[V][i]);
		}
	}
}

void BFS(int V)
{
	queue<int> q;
	q.push(V);
	visit[V] = true;

	while (!q.empty())
	{
		V = q.front();
		cout << V << ' ';
		q.pop();
		for (unsigned int i = 0; i < graph[V].size(); i++)
		{
			if (!visit[graph[V][i]])
			{
				visit[graph[V][i]] = true;
				q.push(graph[V][i]);
			}
		}
	}
}
int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);

	
	cin >> n >> m >> v;
	
	for (int i = 0; i < m; i++)
	{
		int a, b;
		cin >> a >> b;
		graph[a].push_back(b);
		graph[b].push_back(a);
	}

	for (int i = 0; i < n; i++)
		sort(graph[i].begin(), graph[i].end()); 
	// sort를 꼭 해줘야한다.
	DFS(v);
	cout << '\n';
	memset(visit, 0, sizeof(visit));
	BFS(v);
	cout << '\n';



	return 0;
}