#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <functional>
#include <algorithm>
#include <vector>
#include <cstdio>
#include <cassert>
#include <string>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <stack>
#include <queue>
#include <ctime>
#include <deque>
#include <set>
#include <list>
#include <map>
#include <tuple>
#include <sstream>
#include <iomanip> // 출력포매팅 라이브러리


using namespace std;



char board[1001][1001]; 
int visit1[1001][1001]; // 불
int visit2[1001][1001]; // 지훈이

int type[4][2] =
{
	{0,1},
	{0,-1},
	{1,0},
	{-1,0}
};

int r, c;
queue<pair<int, int>> q1; // 불
queue<pair<int, int>> q2; // 지훈이

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);


	cin >> r >> c;

	for (int i = 0; i < r; i++)
	{
		fill(visit1[i], visit1[i] + c, -1);
		fill(visit2[i], visit2[i] + c, -1);
	}

	for (int i = 0; i < r; i++)
	{
		string s;
		cin >> s;
		for (int j = 0; j < c; j++)
			board[i][j] = s[j];
	}

	for (int i = 0; i < r; i++)
	{
		for (int j = 0; j < c; j++)
		{
			if (board[i][j] == 'F') 
			{
				q1.push({ i,j });
				visit1[i][j] = 0;
			}
			if (board[i][j] == 'J')
			{
				q2.push({ i,j });
				visit2[i][j] = 0;
			}
		}
	}



	while (!q1.empty()) // 불 전파
	{
		int x = q1.front().first;
		int y = q1.front().second;
		q1.pop();


		for (int i = 0; i < 4; i++)
		{
			int nx = x + type[i][0];
			int ny = y + type[i][1];

			if (nx < 0 || nx >= r || ny < 0 || ny >= c)
				continue;

			if (visit1[nx][ny] >= 0 || board[nx][ny] == '#')
				continue;

			visit1[nx][ny] = visit1[x][y] + 1;
			q1.push({ nx,ny });
		}
	}

	while (!q2.empty())
	{
		int x = q2.front().first;
		int y = q2.front().second;
		q2.pop();

		for (int i = 0; i < 4; i++)
		{
			int nx = x + type[i][0];
			int ny = y + type[i][1];

			if (nx < 0 || nx >= r || ny < 0 || ny >= c)
			{
				cout << visit2[x][y] + 1;
				return 0;
			}

			if (visit2[nx][ny] >= 0 || board[nx][ny] == '#')
				continue;
			if (visit1[nx][ny] != -1 && visit1[nx][ny] <= visit2[x][y] + 1)
				continue;

			visit2[nx][ny] = visit2[x][y] + 1;
			q2.push({ nx,ny });
		}
	}
	
	cout << "IMPOSSIBLE";
	

	return 0;
}

