#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <functional>
#include <algorithm>
#include <vector>
#include <cstdio>
#include <cassert>
#include <string>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <stack>
#include <queue>
#include <ctime>
#include <deque>
#include <set>
#include <list>
#include <map>
#include <tuple>
#include <sstream>
#include <iomanip> // 출력포매팅 라이브러리


using namespace std;


int n, m, k;
vector<vector<int>> v;
bool visited[11][11] = { false };
int ans = -123456789;

int type[4][2] = 
{
	{1,0},
	{-1,0},
	{0,1},
	{0,-1}
};

void DFS(int cnt, int sum)
{
	if (cnt == k)
	{
		ans = max(ans, sum);
		return;
	}


	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < m; j++)
		{
			if (!visited[i][j])
			{
			
				bool check = true; // 인접했는지 체크
				for (int k = 0; k < 4; k++)
				{
					int nx = i + type[k][0];
					int ny = j + type[k][1];

					if (nx >= 0 && nx < n && ny >= 0 && ny < m)
					{
						if (visited[nx][ny])
							check = false;
					}
				}

				if (check)
				{
					visited[i][j] = true;
					DFS(cnt + 1, sum + v[i][j]);
					visited[i][j] = false;
				}
			}
		}
	}
}

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);


	cin >> n >> m >> k;
	v.resize(n);

	for (int i = 0; i < n; i++)
		v[i].resize(m);

	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < m; j++)
			cin >> v[i][j];
	}

	DFS(0, 0);

	cout << ans << '\n';

	return 0;
}
	
