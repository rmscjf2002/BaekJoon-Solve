#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <functional>
#include <algorithm>
#include <vector>
#include <cstdio>
#include <cassert>
#include <string>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <stack>
#include <queue>
#include <ctime>
#include <deque>
#include <set>
#include <list>
#include <map>
#include <tuple>
#include <sstream>
#include <iomanip> // 출력포매팅 라이브러리


using namespace std;


int s;
bool visited[1001][1001] = { false };

void BFS(int screen, int board, int cnt)
{
	queue<tuple<int, int, int>> q;
	q.push({ screen,board,cnt });
	visited[screen][board] = true;

	while (!q.empty())
	{
		screen = get<0>(q.front());
		board = get<1>(q.front());
		cnt = get<2>(q.front());
	
		if (screen == s)
		{
			cout << cnt << '\n';
			return;
		}

		q.pop();

		// #1. 화면에 있는 이모티콘을 모두 복사해서 보드에 저장
		if (screen > 0 && screen < 1001 && !visited[screen][screen])
		{
			visited[screen][screen] = true;
			q.push({ screen,screen,cnt + 1 });
		}

		// #2. 클립보드에 있는 모든 이모티콘을 화면에 붙여넣기
		if (board > 0 && screen + board < 1001 && !visited[screen + board][board])
		{
			visited[screen + board][board] = true;
			q.push({ screen + board,board,cnt + 1 });
		}

		// #3. 화면에 있는 이모티콘 중 하나를 삭제
		if (screen > 0 && screen < 1001 && !visited[screen - 1][board])
		{
			visited[screen - 1][board] = true;
			q.push({ screen - 1,board,cnt + 1 });
		}
	}
}

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);

	cin >> s;
	BFS(1, 0, 0);

	return 0;
}
	
