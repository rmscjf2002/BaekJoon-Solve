#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <functional>
#include <algorithm>
#include <vector>
#include <cstdio>
#include <cassert>
#include <string>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <stack>
#include <queue>
#include <numeric>
#include <ctime>
#include <deque>
#include <set>
#include <list>
#include <map>
#include <tuple>
#include <sstream>
#include <iomanip> // 출력포매팅 라이브러리


using namespace std;

int k;
string board[4];

void func(int n, int dir)
{
	int dirs[4] = {}; // 각 톱니바퀴가 돌아가는 방향

	dirs[n] = dir; 
	int idx = n;

	// 왼쪽으로 돌리기

	while (idx > 0 && board[idx][6] != board[idx - 1][2])
	{
		dirs[idx - 1] = -dirs[idx];
		idx--;
	}

	// 오른쪽으로 돌리기

	idx = n;

	while (idx < 3 && board[idx][2] != board[idx + 1][6])
	{
		dirs[idx + 1] = -dirs[idx];
		idx++;
	}

	for (int i = 0; i < 4; i++)
	{
		if (dirs[i] == -1) // 반시계
			rotate(board[i].begin(), board[i].begin() + 1, board[i].end());

		else if (dirs[i] == 1) // 시계
			rotate(board[i].begin(), board[i].end() - 1, board[i].end());
	}


}
int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	
	int ans = 0;

	for (int i = 0; i < 4; i++)
		cin >> board[i];

	cin >> k;

	while (k--)
	{
		int num, dir;
		cin >> num >> dir;

		func(num-1, dir);
	}

	for (int i = 0; i < 4; i++)
		if (board[i][0] == '1')
			ans += (1 << i);

	cout << ans << '\n';

	return 0;
}