#define _CRT_SECURE_NO_WARNINGS



#include <iostream>
#include <functional>
#include <algorithm>
#include <vector>
#include <cstdio>
#include <cassert>
#include <string>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <stack>
#include <queue>
#include <numeric>
#include <ctime>
#include <deque>
#include <set>
#include <list>
#include <map>
#include <tuple>
#include <sstream>
#include <iomanip> // 출력포매팅 라이브러리


using namespace std;

int board[4][5][5][5];
int maze[5][5][5];

int type[6][3] = 
{
	{0,0,1},
	{0,0,-1},
	{0,1,0},
	{0,-1,0},
	{1,0,0},
	{-1,0,0}
};



int BFS()
{
	queue<tuple<int, int, int>> q;
	int dist[5][5][5] = { 0 };
	dist[0][0][0] = 1;
	q.push({ 0,0,0 });

	if (maze[0][0][0] == 0 || maze[4][4][4] == 0)
		return 9999;

	while (!q.empty())
	{
		auto cur = q.front();
		int z, x, y;
		tie(z, x, y) = cur;
		q.pop();

		for (int dir = 0; dir < 6; dir++)
		{
			int nz = z + type[dir][0];
			int nx = x + type[dir][1];
			int ny = y + type[dir][2];

			if (nz < 0 || nz >= 5 || nx < 0 || nx >= 5 || ny < 0 || ny >= 5)
				continue;

			if (maze[nz][nx][ny] == 0 || dist[nz][nx][ny] != 0)
				continue;

			if (nz == 4 && nx == 4 && ny == 4)
				return dist[z][x][y];

			dist[nz][nx][ny] = dist[z][x][y] + 1;
			q.push({ nz,nx,ny });
		}
	}

	return 9999;

}
int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	
	for (int i = 0; i < 5; i++)
	{
		for (int j = 0; j < 5; j++)
			for (int k = 0; k < 5; k++)
				cin >> board[0][i][j][k];
	
		for (int j = 0; j < 5; j++)
			for (int k = 0; k < 5; k++)
				board[1][i][j][k] = board[0][i][4 - k][j];

		for (int j = 0; j < 5; j++)
			for (int k = 0; k < 5; k++)
				board[2][i][j][k] = board[1][i][4 - k][j];

		for (int j = 0; j < 5; j++)
			for (int k = 0; k < 5; k++)
				board[3][i][j][k] = board[2][i][4 - k][j];

	}

	vector<int> v = { 0,1,2,3,4 };
	int ans = 0x7f7f7f7f;

	do
	{
		for (int tmp = 0; tmp < 1024; tmp++)
		{
			int brute = tmp;

			for (int i = 0; i < 5; i++)
			{
				int dir = brute % 4;
				brute /= 4;
				for (int j = 0; j < 5; j++)
					for (int k = 0; k < 5; k++)
						maze[i][j][k] = board[dir][v[i]][j][k];
			}

			ans = min(ans, BFS());
		}
	} while (next_permutation(v.begin(), v.end()));

	if (ans == 9999)
		ans = -1;
	cout << ans << '\n';



	return 0;
}
