#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <functional>
#include <algorithm>
#include <vector>
#include <cstdio>
#include <cassert>
#include <string>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <stack>
#include <queue>
#include <ctime>
#include <deque>
#include <list>
#include <map>
#include <tuple>

using namespace std;


int type[4][2] =
{
	{-1,0},
	{1,0},
	{0,-1},
	{0,1}
};

int visit[1001][1001][2];
int Map[1001][1001];
int n, m;

void BFS(int x, int y,int wall)
{
	queue<tuple<int,int,int>> q;
	q.push({ x,y,wall });
	visit[x][y][wall] = 1;

	while (!q.empty())
	{
		tie(x, y, wall) = q.front();
		q.pop();
		if (x == n - 1 && y == m - 1)
		{
			return;
		}
		for (int i = 0; i < 4; i++)
		{
			int nx = x + type[i][0];
			int ny = y + type[i][1];
			int tmpwall = wall;

			if (nx >= 0 && nx < n && ny >= 0 && ny < m)
			{
				if (Map[nx][ny] == 1 && tmpwall != 1 && !visit[nx][ny][tmpwall])
				{
					tmpwall = 1;
					q.push({ nx,ny,tmpwall });
					visit[nx][ny][tmpwall] = visit[x][y][wall] + 1;
				}
				else if (Map[nx][ny] == 0 && !visit[nx][ny][tmpwall])
				{
					q.push({ nx,ny,tmpwall });
					visit[nx][ny][tmpwall] = visit[x][y][wall] + 1;
				}
			}
		}
	}
}
int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);

	cin >> n >> m;
	for (int i = 0; i < n; i++)
	{
		string s;
		cin >> s;
		for (int j = 0; j < m; j++)
		{
			Map[i][j] = s[j] - '0';
		}
	}

	BFS(0, 0,0);

	
	if (max(visit[n - 1][m - 1][0], visit[n - 1][m - 1][1]) == 0)
	{
		cout << -1 << '\n';
	}
	else
		cout << max(visit[n - 1][m - 1][0], visit[n - 1][m - 1][1]) << '\n';


	return 0;
}
/* ***************** 주의 *******************
     !visit를 if문에 안넣어줬다가 메모리 초과나왔음 */ 