#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <functional>
#include <algorithm>
#include <vector>
#include <cstdio>
#include <cassert>
#include <string>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <stack>
#include <queue>
#include <ctime>
#include <deque>
#include <set>
#include <list>
#include <map>
#include <tuple>
#include <sstream>
#include <iomanip> // 출력포매팅 라이브러리


using namespace std;


int answer = 0;
int row, col;
//vector<vector<int>> board(row, vector<int>(col));
int board[501][501] = { 0 };
bool visited[501][501] = { 0 };

int type[4][2] = 
{
	{1,0},
	{-1,0},
	{0,1},
	{0,-1}
};


void DFS(int x, int y, int sum, int cnt)
{
	visited[x][y] = true;

	if (cnt == 3)
	{
		answer = max(answer, sum);
		return;
	}

	for (int i = 0; i < 4; i++)
	{
		int nx = x + type[i][0];
		int ny = y + type[i][1];

		if (nx >= 0 && nx < row && ny >= 0 && ny < col)
		{
			if (!visited[nx][ny])
			{
				DFS(nx, ny, sum + board[nx][ny], cnt + 1);
				visited[nx][ny] = false;
			}
		}
	}
}

// ㅜ 모양의 블럭은 cnt를 3까지 가지 못하므로 따로 구현
// 회전이나 대칭이 가능하므로 ㅜ ㅓ ㅏ ㅗ 총 4가지 구현

// #.1 ㅜ  

void func1(int x, int y)
{
	if (x >= 0 && x + 1 < row && y >= 0 && y + 2 < col)
	{
		int tmp = board[x][y] + board[x][y + 1] + board[x][y + 2] + board[x + 1][y + 1];
		answer = max(answer, tmp);
	}
	return;
}

// #.2 ㅓ

void func2(int x, int y)
{
	if (x >= 0 && x + 2 < row && y - 1 >= 0 && y < col)
	{
		int tmp = board[x][y] + board[x + 1][y] + board[x + 2][y] + board[x + 1][y - 1];
		answer = max(answer, tmp);
	}
	return;
}

// #.3 ㅏ

void func3(int x, int y)
{
	if (x >= 0 && x + 2 < row && y >= 0 && y + 1 < col)
	{
		int tmp = board[x][y] + board[x + 1][y] + board[x + 2][y] + board[x + 1][y + 1];
		answer = max(answer, tmp);
	}
	return;
}

// #.4 ㅗ

void func4(int x, int y)
{
	if (x >= 0 && x + 1 < row && y - 1 >= 0 && y + 1 < col)
	{
		int tmp = board[x][y] + board[x + 1][y] + board[x + 1][y - 1] + board[x + 1][y + 1];
		answer = max(answer, tmp);
	}
	return;
}

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);


	cin >> row >> col;

 	for (int i = 0; i < row; i++)
	{
		for (int j = 0; j < col; j++)
			cin >> board[i][j];
	}


	for (int i = 0; i < row; i++)
	{
		for (int j = 0; j < col; j++)
		{
			memset(visited, false, sizeof(visited));
			DFS(i, j, board[i][j], 0);
			func1(i, j);
			func2(i, j);
			func3(i, j);
			func4(i, j);
		}
	}
	
	cout << answer << '\n';
	

	
	
	return 0;
}
	