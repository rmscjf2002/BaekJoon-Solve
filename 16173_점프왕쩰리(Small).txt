#define _CRT_SECURE_NO_WARNINGS



#include <iostream>
#include <functional>
#include <algorithm>
#include <vector>
#include <cstdio>
#include <cassert>
#include <string>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <stack>
#include <queue>
#include <numeric>
#include <ctime>
#include <deque>
#include <set>
#include <list>
#include <map>
#include <tuple>
#include <sstream>
#include <iomanip> // 출력포매팅 라이브러리


using namespace std;

int n;
int board[5][5];
bool visited[5][5];

int type[2][2] = 
{
	{0,1},
	{1,0}
};

int BFS(int x, int y, int dist)
{
	queue<tuple<int, int, int>> q;
	q.push({ x,y,dist });
	visited[x][y] = true;

	while (!q.empty())
	{
		tie(x, y, dist) = q.front();
		q.pop();
		int tmp;
		for (int i = 0; i < 2; i++)
		{
			int nx = x, ny = y;
			tmp = dist;
			while (tmp--)
			{
				nx += type[i][0];
				ny += type[i][1];
			}

			if (nx < 0 || nx >= n || ny < 0 || ny >= n)
				continue;

			if (visited[nx][ny])
				continue;

			if (nx == n - 1 && ny == n - 1)
				return 1;
			
			q.push({ nx,ny,board[nx][ny] });
			visited[nx][ny] = true;
		}
	}
	return 9999;
}

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);

	cin >> n;

	for (int i = 0; i < n; i++)
		for (int j = 0; j < n; j++)
			cin >> board[i][j];

	
	int ans = BFS(0, 0, board[0][0]);

	if (ans == 1)
		cout << "HaruHaru\n";
	else
		cout << "Hing\n";
	return 0;
}
